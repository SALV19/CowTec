<%- include('../partials/header') %>

<!-- Ultra-Compact Dashboard with Dense Grid Layout -->
<div class="dashboard-grid">
  <!-- Compact KPI Row - 4 Essential Metrics -->
  <div class="kpi-row">
    <%- include('../components/organisms/kpi-section', {
      kpis: [
        {
          title: 'Revenue',
          value: data.kpis.totalSales.toLocaleString(),
          prefix: '$',
          icon: 'dollar-sign',
          bgColor: 'primary',
          id: 'total-sales-card',
          valueId: 'total-sales',
          change: '+12.5%',
          changeType: 'increase'
        },
        {
          title: 'Users',
          value: data.kpis.activeUsers.toLocaleString(),
          icon: 'users',
          bgColor: 'success',
          id: 'active-users-card',
          valueId: 'active-users',
          change: '+8.2%',
          changeType: 'increase'
        },
        {
          title: 'Growth',
          value: data.kpis.revenueGrowth,
          suffix: '%',
          icon: 'trending-up',
          bgColor: 'warning',
          id: 'growth-card',
          valueId: 'revenue-growth',
          change: '+3.1%',
          changeType: 'increase'
        },
        {
          title: 'Orders',
          value: data.kpis.totalOrders ? data.kpis.totalOrders.toLocaleString() : '1,250',
          icon: 'shopping-cart',
          bgColor: 'info',
          id: 'orders-card',
          valueId: 'total-orders',
          change: '+15.7%',
          changeType: 'increase'
        }
      ],
      additionalClasses: 'compact-kpis'
    }) %>
  </div>

  <!-- Essential Charts Only - 4 Key Charts in 2x2 Grid -->
  <div class="charts-grid">
    <!-- Row 1: Sales Trend and Traffic Sources -->
    <div class="chart-row row-1">
      <div class="chart-cell compact-chart">
        <%- include('../components/molecules/chart-card', {
          title: 'Sales Trend',
          subtitle: 'Revenue & Profit',
          icon: 'chart-line',
          chartId: 'sales-trend-chart',
          height: '250px'
        }) %>
      </div>
      <div class="chart-cell compact-chart">
        <%- include('../components/molecules/chart-card', {
          title: 'Traffic Sources',
          subtitle: 'Distribution',
          icon: 'chart-pie',
          chartId: 'traffic-sources-chart',
          height: '250px'
        }) %>
      </div>
    </div>

    <!-- Row 2: Regional Performance and Product Categories -->
    <div class="chart-row row-2">
      <div class="chart-cell compact-chart">
        <%- include('../components/molecules/chart-card', {
          title: 'Regional Sales',
          subtitle: 'Performance',
          icon: 'globe-americas',
          chartId: 'regional-chart',
          height: '250px'
        }) %>
      </div>
      <div class="chart-cell compact-chart">
        <%- include('../components/molecules/chart-card', {
          title: 'Product Categories',
          subtitle: 'Sales & Returns',
          icon: 'boxes',
          chartId: 'categories-chart',
          height: '250px'
        }) %>
      </div>
    </div>
  </div>
</div>

<!-- Dashboard Data -->
<script id="dashboard-data" type="application/json">
<%- JSON.stringify(data) %>
</script>

<!-- Enhanced Dashboard JavaScript -->
<script>
// Dashboard data from controller
const dashboardData = JSON.parse(document.getElementById('dashboard-data').textContent);

// Initialize dashboard with staggered animations
document.addEventListener('DOMContentLoaded', function() {
    // Update last updated time
    updateLastUpdatedTime();
    
    // Add staggered animation delays
    const sections = document.querySelectorAll('.slide-in-up');
    sections.forEach((section, index) => {
        section.style.animationDelay = `${index * 0.2}s`;
    });
    
    // Initialize all charts
    setTimeout(() => {
        initializeDashboard();
    }, 500);
    
    // Update KPIs every 30 seconds with smooth animations
    setInterval(updateKPIs, 30000);
    
    // Initialize real-time features
    initializeRealTimeFeatures();
});

function initializeDashboard() {
    initSalesTrendChart();
    initTrafficSourcesChart();
    initRegionalChart();
    initCategoriesChart();
}

// Essential chart functions only
function initSalesTrendChart() {
    const chart = echarts.init(document.getElementById('sales-trend-chart'));

    const option = {
        title: { show: false },
        tooltip: {
            trigger: 'axis',
            backgroundColor: 'rgba(255, 255, 255, 0.95)',
            borderColor: '#e5e7eb',
            borderWidth: 1,
            textStyle: { color: '#374151' }
        },
        grid: { left: '8%', right: '8%', bottom: '15%', top: '10%' },
        xAxis: {
            type: 'category',
            data: dashboardData.salesTrend.xAxis,
            axisLine: { show: false },
            axisTick: { show: false },
            axisLabel: { color: '#6b7280', fontSize: 10, interval: 0 }
        },
        yAxis: {
            type: 'value',
            axisLine: { show: false },
            axisTick: { show: false },
            axisLabel: { color: '#6b7280', fontSize: 10 }
        },
        series: dashboardData.salesTrend.series.map((s, index) => ({
            name: s.name,
            type: 'line',
            smooth: true,
            data: s.data,
            symbol: 'none',
            lineStyle: { width: 2, color: index === 0 ? '#667eea' : '#10b981' },
            areaStyle: {
                opacity: 0.1,
                color: index === 0 ? '#667eea' : '#10b981'
            }
        }))
    };

    chart.setOption(option);
    window.addEventListener('resize', () => chart.resize());
}

function initTrafficSourcesChart() {
    const chart = echarts.init(document.getElementById('traffic-sources-chart'));

    const option = {
        title: { show: false },
        tooltip: {
            trigger: 'item',
            formatter: '{b}: {c}%'
        },
        series: [{
            type: 'pie',
            radius: ['35%', '65%'],
            center: ['50%', '50%'],
            data: dashboardData.trafficSources.data.map((item, index) => ({
                ...item,
                itemStyle: { color: ['#667eea', '#10b981', '#f59e0b', '#ef4444'][index] || '#6b7280' }
            })),
            label: {
                show: true,
                position: 'outside',
                formatter: '{b}: {d}%',
                fontSize: 11,
                color: '#6b7280'
            },
            emphasis: {
                label: {
                    show: true,
                    fontSize: 14,
                    fontWeight: 'bold'
                }
            }
        }]
    };

    chart.setOption(option);
    window.addEventListener('resize', () => chart.resize());
}

function initRegionalChart() {
    const chart = echarts.init(document.getElementById('regional-chart'));

    const option = {
        title: { show: false },
        tooltip: { trigger: 'axis' },
        grid: { left: '8%', right: '8%', bottom: '25%', top: '10%' },
        xAxis: {
            type: 'category',
            data: dashboardData.regionalPerformance.regions,
            axisLabel: {
                rotate: 45,
                fontSize: 10,
                color: '#6b7280',
                interval: 0,
                formatter: function(value) {
                    // Truncate long labels if needed
                    return value.length > 8 ? value.substring(0, 8) + '...' : value;
                }
            },
            axisLine: { show: false },
            axisTick: { show: false }
        },
        yAxis: {
            type: 'value',
            axisLine: { show: false },
            axisTick: { show: false },
            axisLabel: { fontSize: 10, color: '#6b7280' }
        },
        series: [{
            data: dashboardData.regionalPerformance.data,
            type: 'bar',
            itemStyle: {
                color: '#667eea',
                borderRadius: [2, 2, 0, 0]
            },
            barWidth: '60%'
        }]
    };

    chart.setOption(option);
    window.addEventListener('resize', () => chart.resize());
}

function initCategoriesChart() {
    const chart = echarts.init(document.getElementById('categories-chart'));

    const option = {
        title: { show: false },
        tooltip: { trigger: 'axis' },
        grid: { left: '25%', right: '8%', bottom: '10%', top: '10%' },
        xAxis: {
            type: 'value',
            axisLine: { show: false },
            axisTick: { show: false },
            axisLabel: { fontSize: 10, color: '#6b7280' }
        },
        yAxis: {
            type: 'category',
            data: dashboardData.productCategories.categories,
            axisLine: { show: false },
            axisTick: { show: false },
            axisLabel: {
                fontSize: 10,
                color: '#6b7280',
                formatter: function(value) {
                    // Truncate long category names
                    return value.length > 12 ? value.substring(0, 12) + '...' : value;
                }
            }
        },
        series: dashboardData.productCategories.series.map((s, index) => ({
            name: s.name,
            type: 'bar',
            data: s.data,
            itemStyle: {
                color: index === 0 ? '#10b981' : '#f59e0b',
                borderRadius: [0, 2, 2, 0]
            },
            barWidth: '60%'
        }))
    };

    chart.setOption(option);
    window.addEventListener('resize', () => chart.resize());
}

function initializeRealTimeFeatures() {
    // Add sparkline animations to KPI cards
    document.querySelectorAll('.kpi-card').forEach((card, index) => {
        const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                setTimeout(() => {
                    card.classList.add('animate-pulse');
                    setTimeout(() => {
                        card.classList.remove('animate-pulse');
                    }, 1000);
                }, index * 200);
            }
        });
        observer.observe(card);
    });
}

// KPI update function
function updateLastUpdatedTime() {
    const timeElement = document.getElementById('last-updated-time');
    if (!timeElement) return; // Exit if element doesn't exist
    
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    timeElement.textContent = timeString;
}

function updateKPIs() {
    fetch('/data/kpis/updated')
        .then(response => response.json())
        .then(variations => {
            animateKPIUpdate('total-sales', variations.totalSales, '$');
            animateKPIUpdate('active-users', variations.activeUsers);
            animateKPIUpdate('revenue-growth', variations.revenueGrowth, '', '%');
            animateKPIUpdate('total-orders', variations.totalOrders);
        })
        .catch(error => {
            const variations = {
                totalSales: dashboardData.kpis.totalSales + Math.floor(Math.random() * 5000) - 2500,
                activeUsers: dashboardData.kpis.activeUsers + Math.floor(Math.random() * 200) - 100,
                revenueGrowth: dashboardData.kpis.revenueGrowth + Math.floor(Math.random() * 2) - 1,
                totalOrders: (dashboardData.kpis.totalOrders || 1250) + Math.floor(Math.random() * 50) - 25
            };

            animateKPIUpdate('total-sales', variations.totalSales, '$');
            animateKPIUpdate('active-users', variations.activeUsers);
            animateKPIUpdate('revenue-growth', variations.revenueGrowth, '', '%');
            animateKPIUpdate('total-orders', variations.totalOrders);
        });
}

function animateKPIUpdate(elementId, targetValue, prefix = '', suffix = '') {
    const element = document.getElementById(elementId);
    const card = element.closest('.kpi-card');
    
    // Add update animation to card
    card.classList.add('hover-scale');
    setTimeout(() => card.classList.remove('hover-scale'), 300);
    
    const currentValue = parseInt(element.textContent.replace(/[^0-9.-]/g, ''));
    const duration = 1500;
    const startTime = Date.now();
    
    function updateNumber() {
        const currentTime = Date.now();
        const progress = Math.min((currentTime - startTime) / duration, 1);
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        
        const value = Math.floor(currentValue + (targetValue - currentValue) * easeOutQuart);
        let displayValue = value.toLocaleString();
        
        if (prefix) displayValue = prefix + displayValue;
        if (suffix) displayValue = displayValue + suffix;
        
        element.textContent = displayValue;
        
        if (progress < 1) {
            requestAnimationFrame(updateNumber);
        }
    }
    
    updateNumber();
}

// Chart utility functions
function downloadChart(chartId) {
    const chart = echarts.getInstanceByDom(document.getElementById(chartId));
    const url = chart.getDataURL({
        pixelRatio: 2,
        backgroundColor: '#fff'
    });
    
    const link = document.createElement('a');
    link.download = chartId + '.png';
    link.href = url;
    link.click();
}

function expandChart(chartId) {
    // Implementation for fullscreen chart view
    console.log('Expanding chart:', chartId);
}

function updateTimeRange(chartId, range) {
    // Implementation for updating chart time range
    console.log('Updating time range for', chartId, 'to', range);
}

function refreshChart(chartId) {
    const chart = echarts.getInstanceByDom(document.getElementById(chartId));
    chart.showLoading();
    
    setTimeout(() => {
        chart.hideLoading();
        // Refresh chart data here
    }, 1000);
}

function switchRegionalView(view) {
    console.log('Switching regional view to:', view);
}

function switchCategoryView(view) {
    console.log('Switching category view to:', view);
}
</script>

<%- include('../partials/footer') %>